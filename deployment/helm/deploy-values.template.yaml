environment: "{{ tf.environment }}"
namespace: "staging"

mqe:
  enabled: true
  image:
    repository: "{{ tf.image_registry }}.azurecr.io/{{ env.MQE_IMAGE_NAME }}"
    tag: "{{ env.IMAGE_TAG }}"
    pullPolicy: Always

  server:
    maxWorkers: "1"
    poolSize: "1"

  deploy:
    replicaCount: {{ tf.mqe_replica_count }}
    podAnnotations:
      "pqe/gitsha": "{{ env.GIT_COMMIT }}"

  appRootPath: "/stac"
  port: "80"
  debug: "TRUE"

  tiler_href: https://{{ tf.dns_label }}.westeurope.cloudapp.azure.com/data/

dqe:
  enabled: true
  image:
    repository: "{{ tf.image_registry }}.azurecr.io/{{ env.DQE_IMAGE_NAME }}"
    tag: "{{ env.IMAGE_TAG }}"
    pullPolicy: Always

  server:
    maxWorkers: "1"
    minDbConnections: "1"
    maxDbConnections: "1"

  tiler:
    workersPerCore: "1"
    webConcurrency: "1"

  deploy:
    replicaCount: {{ tf.dqe_replica_count }}
    podAnnotations:
      "pqe/gitsha": "{{ env.GIT_COMMIT }}"

  appRootPath: "/data"
  port: "80"

  stac_api_url: http://pc-metadata-query-engine.staging.svc.cluster.local
  stac_api_href: https://{{ tf.dns_label }}.westeurope.cloudapp.azure.com/stac/

metrics:
  instrumentationKey: "{{ tf.instrumentation_key }}"

sas:
  enabled: true
  image:
    repository: "{{ tf.image_registry }}.azurecr.io/{{ env.SAS_IMAGE_NAME }}"
    tag: "{{ env.IMAGE_TAG }}"
    pullPolicy: Always

  server:
    maxWorkers: "1"

  deploy:
    replicaCount: {{ tf.sas_replica_count }}
    podAnnotations:
      "pqe/gitsha": "{{ env.GIT_COMMIT }}"

  appRootPath: "/sas"
  port: "80"

  mqeUrl: http://pc-metadata-query-engine.staging.svc.cluster.local


  tenantId: "{{ tf.sas_tenant_id }}"
  clientId: "{{ tf.sas_client_id }}"
  clientSecret: "{{ tf.sas_client_secret }}"
  anonymous:
    expiryMinutesWithinDatacenter: "{{ tf.sas_expiry_within_datacenter }}"
    expiryMinutesOutOfDatacenter: "{{ tf.sas_expiry_out_of_datacenter }}"
  subscription:
    expiryMinutesWithinDatacenter: "{{ tf.sas_expiry_auth_within_datacenter }}"
    expiryMinutesOutOfDatacenter: "{{ tf.sas_expiry_auth_out_of_datacenter }}"

pcingress:
  services:
    mqe:
      path: "/stac(/|$)(.*)"
      name: "pc-metadata-query-engine"
      port: "80"
    dqe:
      path: "/data(/|$)(.*)"
      name: "pc-data-query-engine"
      port: "80"
    sas:
      path: "/sas(/|$)(.*)"
      name: "pc-pqe-sasapi"
      port: "80"

  cert:
    secretName: "pqe-tls-secret"

  certIssuer:
    enabled: true
    privateKeySecretRef: "{{ tf.cluster_cert_issuer }}"
    server: "{{ tf.cluster_cert_server }}"
    issuerEmail: "planetarycomputer@microsoft.com"
    secretName: "pqe-tls-secret"

  ingress:
    enabled: true
    tlsHost: "{{ tf.dns_label }}.{{ tf.location }}.cloudapp.azure.com"
    hosts:
      - "{{ tf.dns_label }}.{{ tf.location }}.cloudapp.azure.com"
      - "{{ tf.api_management_name }}.azure-api.net"
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: "{{ tf.cluster_cert_issuer }}-pcingress"
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
      nginx.ingress.kubernetes.io/proxy-buffers-number: "8"

migrations:
  enabled: false

postgres:
  serverName: "{{ tf.pg_host }}"
  user: "{{ tf.pg_user }}"
  password: "{{ tf.pg_password }}"
  dbName: "{{ tf.pg_database }}"

cosmos:
  url: "{{ tf.cosmos_url }}"
  key: "{{ tf.cosmos_key }}"
  dbName: "{{ tf.cosmos_db_name }}"
